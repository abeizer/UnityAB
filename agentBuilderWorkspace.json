{"nodes":[{"width":93,"height":36,"id":"1","type":"rootNode","position":{"x":0,"y":0},"deletable":false,"data":{"nodeTypeName":"Root Node","nodeTypeDescription":"This is the Root Node, from which the rest of the graph is built.","label":"Root Node"},"positionAbsolute":{"x":0,"y":0}},{"width":167,"height":52,"id":"2","type":"sequenceNode","position":{"x":0,"y":100},"deletable":false,"data":{"isConnectableTarget":false,"nodeTypeName":"Sequence Node","nodeTypeDescription":"This is the starting point for your bot's Behavior Tree logic.","label":"Top Level Sequence Node","prompt":"","code":""},"positionAbsolute":{"x":0,"y":100},"selected":false,"dragging":false},{"width":129,"height":52,"id":"3","type":"actionNode","position":{"x":-166.80651876951993,"y":206.81572736765682},"data":{"subType":null,"displayName":"Action Node","displayDescription":"Action nodes represent complex actions (e.g., 'open the door').","label":"Set Character Type","prompt":"","code":"class LeafNode extends TreeNode {\n\t\n\tcharInfo = {\n\t\t\ttype: [\"Mage\", \"Rogue\", \"Tank\", \"Archer\"],\n\t\t\tabilities: [[0,1], [0,1,2], [0,1], [0,1,2]],\n\t\t\t// teamId\n\t\t\tabilityTargets: [[1,0], [1,1,-1], [1,-1], [1,1,1]]\n\t}\n\n\tpublic override async execute(rg): Promise<NodeStatus>{\t\t\n\n\t\t// The character type we request may not be the one we actually get\n\t\tconst characterType = rg.characterConfig.characterType;\n\t\tif (characterType) {\n\t\t\tconst newCharType = this.charInfo.type.indexOf(characterType);\n\t\t\tthis.setData(\"charType\", newCharType)\n\t\t\treturn NodeStatus.SUCCESS;\n  \t}\n\t\t\n\t\tconsole.error(\"NO CHARACTER TYPE\");\n\t\treturn NodeStatus.FAILURE;\n\t}\n}"},"positionAbsolute":{"x":-166.80651876951993,"y":206.81572736765682},"selected":true,"dragging":false}],"edges":[{"animated":true,"id":"e1-2","source":"1","target":"2","deletable":false},{"animated":true,"id":"3","source":"2","target":"3"}],"viewport":{"x":722.9659668774361,"y":137.65735920993978,"zoom":0.5112149573888801}}