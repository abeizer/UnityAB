{"nodes":[{"width":93,"height":36,"id":"1","type":"rootNode","position":{"x":0,"y":0},"deletable":false,"data":{"nodeTypeName":"Root Node","nodeTypeDescription":"This is the Root Node, from which the rest of the graph is built.","label":"Root Node"},"positionAbsolute":{"x":0,"y":0}},{"width":167,"height":52,"id":"2","type":"sequenceNode","position":{"x":0,"y":100},"deletable":false,"data":{"isConnectableTarget":false,"nodeTypeName":"Sequence Node","nodeTypeDescription":"This is the starting point for your bot's Behavior Tree logic.","label":"Top Level Sequence Node","prompt":"","code":""},"positionAbsolute":{"x":0,"y":100},"selected":false,"dragging":false},{"width":129,"height":52,"id":"3","type":"actionNode","position":{"x":-274.50646190593125,"y":195.97799724072237},"data":{"subType":null,"displayName":"Action Node","displayDescription":"Action nodes represent complex actions (e.g., 'open the door').","label":"Set Character Type","prompt":"","code":"class LeafNode extends TreeNode {\n\t\n\tcharInfo = {\n\t\t\ttype: [\"Mage\", \"Rogue\", \"Tank\", \"Archer\"],\n\t\t\tabilities: [[0,1], [0,1,2], [0,1], [0,1,2]],\n\t\t\t// teamId\n\t\t\tabilityTargets: [[1,0], [1,1,-1], [1,-1], [1,1,1]]\n\t}\n\n\tpublic override async execute(rg): Promise<NodeStatus>{\t\t\n\n\t\t// The character type we request may not be the one we actually get\n\t\tconst characterType = rg.characterConfig.characterType;\n\t\tif (characterType) {\n\t\t\tconst newCharType = this.charInfo.type.indexOf(characterType);\n\t\t\tthis.setData(\"charType\", newCharType)\n\t\t\treturn NodeStatus.SUCCESS;\n  \t}\n\t\t\n\t\tconsole.error(\"NO CHARACTER TYPE\");\n\t\treturn NodeStatus.FAILURE;\n\t}\n}"},"positionAbsolute":{"x":-274.50646190593125,"y":195.97799724072237},"selected":false,"dragging":false},{"width":118,"height":52,"id":"6","type":"selectorNode","position":{"x":-117.443155654495,"y":196.6334809544632},"data":{"subType":null,"displayName":"Selector Node","displayDescription":"Selector nodes execute children in order until one of them returns Success or all children return Failure. This is like an OR operator.","label":"Choose an action","prompt":"","code":""},"positionAbsolute":{"x":-117.443155654495,"y":196.6334809544632},"selected":false,"dragging":false},{"width":122,"height":52,"id":"7","type":"sequenceNode","position":{"x":-265.7845867669106,"y":307.7202147555416},"data":{"subType":null,"displayName":"Sequence Node","displayDescription":"Sequence nodes execute children in order until one child returns Failure or all children returns Success. This is like an AND operator.","label":"Floor switches","prompt":"","code":""},"positionAbsolute":{"x":-265.7845867669106,"y":307.7202147555416},"selected":false,"dragging":false},{"width":154,"height":52,"id":"9","type":"conditionNode","position":{"x":-470.34674291279885,"y":395.7767720368841},"data":{"subType":null,"displayName":"Condition Node","displayDescription":"Condition nodes represent simple checks (e.g., 'is the gripper open?')","label":"Is floor switch in range?","prompt":"","code":"class LeafNode extends TreeNode {\n\tpublic override async execute(rg): Promise<NodeStatus>{\t\t\n\t\t// if the bot is standing on a switch, then do nothing\n  \tconst floorSwitch = await rg.findEntity(\"FloorSwitch\");\n\t\tif(floorSwitch) {\n\t\t\trg.setData(\"floorSwitch\", floorSwitch);\n\t\t\treturn NodeStatus.SUCCESS;\n\t\t}\n\n\t\treturn NodeStatus.FAILURE;\n\t}\n}"},"positionAbsolute":{"x":-470.34674291279885,"y":395.7767720368841},"selected":false,"dragging":false},{"width":110,"height":52,"id":"10","type":"actionNode","position":{"x":-303.7166422111813,"y":395.0994139039507},"data":{"subType":null,"displayName":"Action Node","displayDescription":"Action nodes represent complex actions (e.g., 'open the door').","label":"Stand on switch","prompt":"","code":"class LeafNode extends TreeNode {\n\tpublic override async execute(rg): Promise<NodeStatus>{\t\t\n\t\tconst floorSwitch = this.getData<any>(\"floorSwitch\");\n\n\t\t// already standing on it\n\t\tif(floorSwitch && await rg.entityHasAttribute(floorSwitch, \"isOn\", true)) {\n\t\t\treturn NodeStatus.SUCCESS;\n\t\t}\n\n\t\t// otherwise go to it\n\t\tif(floorSwitch && rg.MathFunctions.distanceSq(rg.getBot().position, floorSwitch.position) < 30) {\n\t\t\trg.performAction(\"FollowObject\", {\n\t\t\t\ttargetId: floorSwitch.id,\n\t\t\t\trange: 0.1\n\t\t\t});\n\t\t\treturn NodeStatus.RUNNING;\n  \t}\n\n\t\treturn NodeStatus.FAILURE\n\t}\n}"},"positionAbsolute":{"x":-303.7166422111813,"y":395.0994139039507},"selected":true,"dragging":false}],"edges":[{"animated":true,"id":"e1-2","source":"1","target":"2","deletable":false},{"animated":true,"id":"3","source":"2","target":"3"},{"animated":true,"id":"6","source":"2","target":"6"},{"animated":true,"id":"7","source":"6","target":"7"},{"animated":true,"id":"9","source":"7","target":"9"},{"animated":true,"id":"10","source":"7","target":"10"}],"viewport":{"x":624.1416666119748,"y":18.99379620706827,"zoom":1.1530160517511252}}