{"nodes":[{"width":98,"height":36,"id":"1","type":"rootNode","position":{"x":-91.70250000373933,"y":-4.298554687675306},"deletable":false,"data":{"nodeTypeName":"Root Node","nodeTypeDescription":"This is the Root Node, from which the rest of the graph is built.","label":"Root Node"},"positionAbsolute":{"x":-91.70250000373933,"y":-4.298554687675306},"selected":false,"dragging":false},{"width":167,"height":52,"id":"2","type":"sequenceNode","position":{"x":-128.95664063025845,"y":89.97003906209102},"deletable":false,"data":{"isConnectableTarget":false,"nodeTypeName":"Sequence Node","nodeTypeDescription":"This is the starting point for your bot's Behavior Tree logic.","label":"Top Level Sequence Node","prompt":"","code":""},"positionAbsolute":{"x":-128.95664063025845,"y":89.97003906209102},"selected":false,"dragging":false},{"width":94,"height":52,"id":"3","type":"actionNode","position":{"x":-398.7468160596599,"y":191.57231092321425},"data":{"subType":null,"displayName":"Action Node","displayDescription":"Action nodes represent complex actions (e.g., 'open the door').","label":"Set charType","prompt":"Store my bot's characterType in the data map. If characterType is not defined then fail.","code":"protected override NodeStatus Execute(RG rgObject)\n{\n\tvar myPlayer = rgObject.GetMyPlayer();\n\tif(myPlayer.ContainsKey(\"characterType\"))\n\t{\n\t\tSetData(\"characterType\", myPlayer[\"characterType\"]);\n\t\treturn NodeStatus.Success;\n\t}\n\telse\n\t{\n\t\treturn NodeStatus.Failure;\n\t}\n}"},"positionAbsolute":{"x":-398.7468160596599,"y":191.57231092321425},"selected":false,"dragging":false},{"width":118,"height":52,"id":"6","type":"selectorNode","position":{"x":-105.98837122897393,"y":191.34665737345347},"data":{"subType":null,"displayName":"Selector Node","displayDescription":"Selector nodes execute children in order until one of them returns Success or all children return Failure. This is like an OR operator.","label":"Choose an action","prompt":"","code":""},"positionAbsolute":{"x":-105.98837122897393,"y":191.34665737345347},"selected":false,"dragging":false},{"width":129,"height":52,"id":"7","type":"sequenceNode","position":{"x":-265.7845867669106,"y":307.7202147555416},"data":{"subType":null,"displayName":"Sequence Node","displayDescription":"Sequence nodes execute children in order until one child returns Failure or all children returns Success. This is like an AND operator.","label":"Floor switches","prompt":"","code":""},"positionAbsolute":{"x":-265.7845867669106,"y":307.7202147555416},"selected":false,"dragging":false},{"width":154,"height":52,"id":"9","type":"conditionNode","position":{"x":-476.28056439447016,"y":393.7988315429936},"data":{"subType":null,"displayName":"Condition Node","displayDescription":"Condition nodes represent simple checks (e.g., 'is the gripper open?')","label":"Is floor switch in range?","prompt":"Find the closest floor switch. If it's not on then store it","code":"protected override NodeStatus Execute(RG rgObject)\n{\n\tvar floorSwitch = rgObject.FindNearestEntity(\"FloorSwitch\");\n\tif (floorSwitch != null && !(bool)floorSwitch[\"isOn\"])\n\t{\n\t\tSetData(\"FloorSwitch\", floorSwitch);\n\t\treturn NodeStatus.Success;\n\t}\n\treturn NodeStatus.Failure;\n}"},"positionAbsolute":{"x":-476.28056439447016,"y":393.7988315429936},"selected":false,"dragging":false},{"width":110,"height":52,"id":"10","type":"actionNode","position":{"x":-303.7166422111813,"y":395.0994139039507},"data":{"subType":null,"displayName":"Action Node","displayDescription":"Action nodes represent complex actions (e.g., 'open the door').","label":"Stand on switch","prompt":"Go stand on the stored \"FloorSwitch\". If I'm already standing on it then return Running.","code":"protected override NodeStatus Execute(RG rgObject)\n{\n\tvar floorSwitch = GetData<RGStateEntity>(\"FloorSwitch\");\n\tvar myPlayer = rgObject.GetMyPlayer();\n\n\tif (RG.MathFunctions.DistanceSq(myPlayer.position, floorSwitch.position) < 0.5)\n\t\treturn NodeStatus.Running;\n\n\tvar followAction = new RGActionRequest(\"FollowObject\", new Dictionary<string, object>\n\t{\n\t\t{ \"targetId\", floorSwitch.id },\n\t\t{ \"range\", 0.25f }\n\t});\n\n\trgObject.PerformAction(followAction);\n\n\treturn NodeStatus.Success;\n}"},"positionAbsolute":{"x":-303.7166422111813,"y":395.0994139039507},"selected":true,"dragging":false},{"width":129,"height":52,"id":"12","type":"sequenceNode","position":{"x":-103.33044924312216,"y":308.7608392374527},"data":{"subType":null,"displayName":"Sequence Node","displayDescription":"Sequence nodes execute children in order until one child returns Failure or all children returns Success. This is like an AND operator.","label":"Support human","prompt":"","code":""},"positionAbsolute":{"x":-103.33044924312216,"y":308.7608392374527},"selected":false,"dragging":false},{"width":119,"height":52,"id":"13","type":"conditionNode","position":{"x":-150.6111145878715,"y":394.62261006852253},"data":{"subType":null,"displayName":"Condition Node","displayDescription":"Condition nodes represent simple checks (e.g., 'is the gripper open?')","label":"Is human nearby?","prompt":"Find the closest human. If they're more than 50 square meters away then store a reference to them","code":"protected override NodeStatus Execute(RG rgObject)\n{\n\tvar human = rgObject.FindNearestEntity(\"HumanPlayer\");\n\tif(human == null)\n\t\treturn NodeStatus.Failure;\n\tif(rgObject.MathFunctions.DistanceSq(rgObject.GetMyPlayer().position, human.position) > 50)\n\t{\n\t\tSetData(\"closestHuman\", human);\n\t\treturn NodeStatus.Success;\n\t}\n\treturn NodeStatus.Failure;\n}"},"positionAbsolute":{"x":-150.6111145878715,"y":394.62261006852253},"selected":false,"dragging":false},{"width":98,"height":52,"id":"14","type":"actionNode","position":{"x":-15.734097183141898,"y":392.88802883961205},"data":{"subType":null,"displayName":"Action Node","displayDescription":"Action nodes represent complex actions (e.g., 'open the door').","label":"Follow human","prompt":"Approach the \"closestHuman\" within 2 meters","code":"protected override NodeStatus Execute(RG rgObject)\n{\n\tvar closestHuman = rgObject.FindNearestEntity(\"HumanPlayer\");\n\tif (closestHuman == null)\n\t\treturn NodeStatus.Failure;\n\n\trgObject.PerformAction(new RGActionRequest(\"FollowObject\", new Dictionary<string, object> { { \"targetId\", closestHuman.id }, { \"range\", 2 } }));\n\treturn NodeStatus.Success;\n}"},"positionAbsolute":{"x":-15.734097183141898,"y":392.88802883961205},"selected":false,"dragging":false},{"width":129,"height":52,"id":"15","type":"sequenceNode","position":{"x":123.03240112969817,"y":306.1589673940871},"data":{"subType":null,"displayName":"Sequence Node","displayDescription":"Sequence nodes execute children in order until one child returns Failure or all children returns Success. This is like an AND operator.","label":"Attack enemy","prompt":"","code":""},"positionAbsolute":{"x":123.03240112969817,"y":306.1589673940871},"selected":false,"dragging":false},{"width":119,"height":52,"id":"16","type":"conditionNode","position":{"x":112.62491375623515,"y":390.28615699624635},"data":{"subType":null,"displayName":"Condition Node","displayDescription":"Condition nodes represent simple checks (e.g., 'is the gripper open?')","label":"Is enemy nearby?","prompt":"Find the closest unbroken entity (broken may not exist) on team 1 and store a reference to it","code":"protected override NodeStatus Execute(RG rgObject)\n{\n\tvar nearestEntity = rgObject.FindNearestEntity(filterFunction: entity => \n\t\t(int)entity[\"team\"] == 1 && (!entity.ContainsKey(\"broken\") || !(bool)entity[\"broken\"]));\n\tif (nearestEntity != null)\n\t{\n\t\tSetData(\"nearestEntity\", nearestEntity);\n\t\treturn NodeStatus.Success;\n\t}\n\telse\n\t{\n\t\treturn NodeStatus.Failure;\n\t}\n}"},"positionAbsolute":{"x":112.62491375623515,"y":390.28615699624635},"selected":false,"dragging":false},{"width":94,"height":52,"id":"17","type":"actionNode","position":{"x":247.05495899679892,"y":389.4188663817911},"data":{"subType":null,"displayName":"Action Node","displayDescription":"Action nodes represent complex actions (e.g., 'open the door').","label":"Attack","prompt":"Attack the stored \"nearestEntity\"","code":"protected override NodeStatus Execute(RG rgObject)\n{\n\tvar nearestEntity = GetData<RGStateEntity>(\"nearestEntity\");\n\tif(nearestEntity == null)\n\t\treturn NodeStatus.Failure;\n\n\tvar actionParams = new Dictionary<string, object>\n\t{\n\t\t{\"targetId\", nearestEntity.id},\n\t\t{\"xPosition\", nearestEntity.position.x},\n\t\t{\"yPosition\", nearestEntity.position.y},\n\t\t{\"zPosition\", nearestEntity.position.z}\n\t};\n\n\trgObject.PerformAction(new RGActionRequest(\"AttackObject\", actionParams));\n\treturn NodeStatus.Success;\n}"},"positionAbsolute":{"x":247.05495899679892,"y":389.4188663817911},"selected":false,"dragging":false},{"width":113,"height":52,"id":"18","type":"conditionNode","position":{"x":-534.8726267076222,"y":192.30911954986473},"data":{"subType":null,"displayName":"Condition Node","displayDescription":"Condition nodes represent simple checks (e.g., 'is the gripper open?')","label":"Is in game?","prompt":"If I'm not on the BossRoom scene then Running","code":"protected override NodeStatus Execute(RG rgObject)\n{\n\tif (rgObject.SceneName != \"BossRoom\")\n\t\treturn NodeStatus.Running;\n\telse\n\t\treturn NodeStatus.Success;\n}"},"positionAbsolute":{"x":-534.8726267076222,"y":192.30911954986473},"selected":false,"dragging":false},{"width":165,"height":52,"id":"20","type":"conditionNode","position":{"x":-291.30547555592665,"y":191.7988769608247},"data":{"subType":null,"displayName":"Condition Node","displayDescription":"Condition nodes represent simple checks (e.g., 'is the gripper open?')","label":"Complete queued actions","prompt":"If I have queued actions then return running","code":"protected override NodeStatus Execute(RG rgObject)\n{\n\tvar myPlayer = rgObject.GetMyPlayer();\n\tif ((bool)myPlayer[\"hasQueuedActions\"])\n\t\treturn NodeStatus.Running;\n\telse\n\t\treturn NodeStatus.Success;\n}"},"positionAbsolute":{"x":-291.30547555592665,"y":191.7988769608247},"selected":false,"dragging":false}],"edges":[{"animated":true,"id":"e1-2","source":"1","target":"2","deletable":false},{"animated":true,"id":"3","source":"2","target":"3"},{"animated":true,"id":"6","source":"2","target":"6"},{"animated":true,"id":"7","source":"6","target":"7"},{"animated":true,"id":"9","source":"7","target":"9"},{"animated":true,"id":"10","source":"7","target":"10","selected":false},{"animated":true,"id":"12","source":"6","target":"12"},{"animated":true,"id":"13","source":"12","target":"13","selected":false},{"animated":true,"id":"14","source":"12","target":"14"},{"animated":true,"id":"15","source":"6","target":"15"},{"animated":true,"id":"16","source":"15","target":"16"},{"animated":true,"id":"17","source":"15","target":"17"},{"animated":true,"id":"18","source":"2","target":"18","selected":false},{"animated":true,"id":"20","source":"2","target":"20"}],"viewport":{"x":504.40360912068604,"y":81.36224678328733,"zoom":0.7762328076254222}}