{"nodes":[{"width":98,"height":36,"id":"1","type":"rootNode","position":{"x":-91.70250000373933,"y":-4.298554687675306},"deletable":false,"data":{"nodeTypeName":"Root Node","nodeTypeDescription":"This is the Root Node, from which the rest of the graph is built.","label":"Root Node"},"positionAbsolute":{"x":-91.70250000373933,"y":-4.298554687675306},"selected":false,"dragging":false},{"width":167,"height":52,"id":"2","type":"sequenceNode","position":{"x":-128.95664063025845,"y":89.97003906209102},"deletable":false,"data":{"isConnectableTarget":false,"nodeTypeName":"Sequence Node","nodeTypeDescription":"This is the starting point for your bot's Behavior Tree logic.","label":"Top Level Sequence Node","prompt":"","code":""},"positionAbsolute":{"x":-128.95664063025845,"y":89.97003906209102},"selected":false,"dragging":false},{"width":94,"height":52,"id":"3","type":"actionNode","position":{"x":-398.7468160596599,"y":191.57231092321425},"data":{"subType":null,"displayName":"Action Node","displayDescription":"Action nodes represent complex actions (e.g., 'open the door').","label":"Set charType","prompt":"Store my bot's characterType in the data map. If characterType is not defined then fail.","code":"protected override NodeStatus Execute(RG rgObject)\n{\n\tvar myPlayer = rgObject.GetMyPlayer();\n\tif(myPlayer.ContainsKey(\"characterType\"))\n\t{\n\t\tSetData(\"characterType\", myPlayer[\"characterType\"]);\n\t\treturn NodeStatus.Success;\n\t}\n\telse\n\t{\n\t\treturn NodeStatus.Failure;\n\t}\n}"},"positionAbsolute":{"x":-398.7468160596599,"y":191.57231092321425},"selected":false,"dragging":false},{"width":118,"height":52,"id":"6","type":"selectorNode","position":{"x":-105.98837122897393,"y":191.34665737345347},"data":{"subType":null,"displayName":"Selector Node","displayDescription":"Selector nodes execute children in order until one of them returns Success or all children return Failure. This is like an OR operator.","label":"Choose an action","prompt":"","code":""},"positionAbsolute":{"x":-105.98837122897393,"y":191.34665737345347},"selected":false,"dragging":false},{"width":129,"height":52,"id":"7","type":"sequenceNode","position":{"x":-600.8025032451001,"y":402.17835012990923},"data":{"subType":null,"displayName":"Sequence Node","displayDescription":"Sequence nodes execute children in order until one child returns Failure or all children returns Success. This is like an AND operator.","label":"Find next switch","prompt":"","code":""},"positionAbsolute":{"x":-600.8025032451001,"y":402.17835012990923},"selected":false,"dragging":false},{"width":154,"height":52,"id":"9","type":"conditionNode","position":{"x":-711.4173152775128,"y":516.7987418557816},"data":{"subType":null,"displayName":"Condition Node","displayDescription":"Condition nodes represent simple checks (e.g., 'is the gripper open?')","label":"Is floor switch in range?","prompt":"Find the closest floor switch that is not on. If it is within 70 sq. meters then store it","code":"protected override NodeStatus Execute(RG rgObject)\n{\n\tvar floorSwitch = rgObject.FindNearestEntity(\"FloorSwitch\", rgObject.GetMyPlayer().position, e => !(bool)e.GetValueOrDefault(\"isOn\", false));\n\tif(floorSwitch == null)\n\t\treturn NodeStatus.Failure;\n\tif(RG.MathFunctions.DistanceSq(rgObject.GetMyPlayer().position, floorSwitch.position) <= 70)\n\t{\n\t\tSetData(\"floorSwitch\", floorSwitch);\n\t\treturn NodeStatus.Success;\n\t}\n\treturn NodeStatus.Failure;\n}"},"positionAbsolute":{"x":-711.4173152775128,"y":516.7987418557816},"selected":false,"dragging":false},{"width":110,"height":52,"id":"10","type":"actionNode","position":{"x":-511.39674756306664,"y":518.0993242167385},"data":{"subType":null,"displayName":"Action Node","displayDescription":"Action nodes represent complex actions (e.g., 'open the door').","label":"Stand on switch","prompt":"Go stand on the stored \"floorSwitch\"","code":"protected override NodeStatus Execute(RG rgObject)\n{\n\tvar floorSwitch = GetData<RGStateEntity>(\"floorSwitch\");\n\trgObject.PerformAction(new RGActionRequest(\"FollowObject\", new Dictionary<string, object> { { \"targetId\", floorSwitch.id } }));\n\treturn NodeStatus.Success;\n}"},"positionAbsolute":{"x":-511.39674756306664,"y":518.0993242167385},"selected":true,"dragging":false},{"width":129,"height":52,"id":"12","type":"sequenceNode","position":{"x":-183.6387248667537,"y":294.4958396031954},"data":{"subType":null,"displayName":"Sequence Node","displayDescription":"Sequence nodes execute children in order until one child returns Failure or all children returns Success. This is like an AND operator.","label":"Support human","prompt":"","code":""},"positionAbsolute":{"x":-183.6387248667537,"y":294.4958396031954},"selected":false,"dragging":false},{"width":119,"height":52,"id":"13","type":"conditionNode","position":{"x":-357.19431486258844,"y":402.29832879316626},"data":{"subType":null,"displayName":"Condition Node","displayDescription":"Condition nodes represent simple checks (e.g., 'is the gripper open?')","label":"Is human nearby?","prompt":"Find the closest human. If they're more than 50 square meters away then store a reference to them","code":"protected override NodeStatus Execute(RG rgObject)\n{\n\tvar human = rgObject.FindNearestEntity(\"HumanPlayer\");\n\tif(human == null) return NodeStatus.Failure;\n\tif(RG.MathFunctions.DistanceSq(rgObject.GetMyPlayer().position, human.position) > 50)\n\t{\n\t\tSetData(\"closestHuman\", human);\n\t\treturn NodeStatus.Success;\n\t}\n\treturn NodeStatus.Failure;\n}"},"positionAbsolute":{"x":-357.19431486258844,"y":402.29832879316626},"selected":false,"dragging":false},{"width":98,"height":52,"id":"14","type":"actionNode","position":{"x":-165.2311307654839,"y":399.4668424870873},"data":{"subType":null,"displayName":"Action Node","displayDescription":"Action nodes represent complex actions (e.g., 'open the door').","label":"Follow human","prompt":"Approach the \"closestHuman\" within 2 meters","code":"protected override NodeStatus Execute(RG rgObject)\n{\n\tvar closestHuman = rgObject.FindNearestEntity(\"HumanPlayer\");\n\tif (closestHuman == null)\n\t\treturn NodeStatus.Failure;\n\n\trgObject.PerformAction(new RGActionRequest(\"FollowObject\", new Dictionary<string, object> { { \"targetId\", closestHuman.id }, { \"range\", 2 } }));\n\treturn NodeStatus.Success;\n}"},"positionAbsolute":{"x":-165.2311307654839,"y":399.4668424870873},"selected":false,"dragging":false},{"width":129,"height":52,"id":"15","type":"sequenceNode","position":{"x":50.16910509548518,"y":296.2920553306414},"data":{"subType":null,"displayName":"Sequence Node","displayDescription":"Sequence nodes execute children in order until one child returns Failure or all children returns Success. This is like an AND operator.","label":"Attack enemy","prompt":"","code":""},"positionAbsolute":{"x":50.16910509548518,"y":296.2920553306414},"selected":false,"dragging":false},{"width":119,"height":52,"id":"16","type":"conditionNode","position":{"x":-20.4517132309469,"y":411.15744684109194},"data":{"subType":null,"displayName":"Condition Node","displayDescription":"Condition nodes represent simple checks (e.g., 'is the gripper open?')","label":"Is enemy nearby?","prompt":"Find the closest entity that isn't broken on team 1. If it is within 50 meters then store a reference to it","code":"protected override NodeStatus Execute(RG rgObject)\n{\n\tvar closestEntity = rgObject.FindNearestEntity(filterFunction: entity => \n\t\t(int)entity.GetValueOrDefault(\"team\", 0) == 1 && \n\t\t!(bool)entity.GetValueOrDefault(\"broken\", false));\n\t\t\n\tif(closestEntity != null && RG.MathFunctions.DistanceSq(rgObject.GetMyPlayer().position, closestEntity.position) <= 50)\n\t{\n\t\tSetData(\"closestEntity\", closestEntity);\n\t\treturn NodeStatus.Success;\n\t}\n\t\n\treturn NodeStatus.Failure;\n}"},"positionAbsolute":{"x":-20.4517132309469,"y":411.15744684109194},"selected":false,"dragging":false},{"width":94,"height":52,"id":"17","type":"actionNode","position":{"x":124.96046685897281,"y":403.69825850148857},"data":{"subType":null,"displayName":"Action Node","displayDescription":"Action nodes represent complex actions (e.g., 'open the door').","label":"Attack","prompt":"Attack the stored \"nearestEntity\"","code":"protected override NodeStatus Execute(RG rgObject)\n{\n\tvar nearestEntity = GetData<RGStateEntity>(\"nearestEntity\");\n\tif(nearestEntity == null)\n\t\treturn NodeStatus.Failure;\n\n\tvar actionParams = new Dictionary<string, object>\n\t{\n\t\t{\"targetId\", nearestEntity.id},\n\t\t{\"xPosition\", nearestEntity.position.x},\n\t\t{\"yPosition\", nearestEntity.position.y},\n\t\t{\"zPosition\", nearestEntity.position.z}\n\t};\n\n\trgObject.PerformAction(new RGActionRequest(\"AttackObject\", actionParams));\n\treturn NodeStatus.Success;\n}"},"positionAbsolute":{"x":124.96046685897281,"y":403.69825850148857},"selected":false,"dragging":false},{"width":113,"height":52,"id":"18","type":"conditionNode","position":{"x":-534.1234184609971,"y":192.30911954986473},"data":{"subType":null,"displayName":"Condition Node","displayDescription":"Condition nodes represent simple checks (e.g., 'is the gripper open?')","label":"Is in game?","prompt":"If I'm not on the BossRoom scene or my bot is not defined then Running else succeed","code":"protected override NodeStatus Execute(RG rgObject)\n{\n\tif (rgObject.SceneName != \"BossRoom\" || rgObject.GetMyPlayer() == null)\n\t\treturn NodeStatus.Running;\n\telse\n\t\treturn NodeStatus.Success;\n}"},"positionAbsolute":{"x":-534.1234184609971,"y":192.30911954986473},"selected":false,"dragging":false},{"width":165,"height":52,"id":"20","type":"conditionNode","position":{"x":-291.30547555592665,"y":191.7988769608247},"data":{"subType":null,"displayName":"Condition Node","displayDescription":"Condition nodes represent simple checks (e.g., 'is the gripper open?')","label":"Complete queued actions","prompt":"If I have queued actions then return running","code":"protected override NodeStatus Execute(RG rgObject)\n{\n\tvar myPlayer = rgObject.GetMyPlayer();\n\tif ((bool)myPlayer[\"hasQueuedActions\"])\n\t\treturn NodeStatus.Running;\n\telse\n\t\treturn NodeStatus.Success;\n}"},"positionAbsolute":{"x":-291.30547555592665,"y":191.7988769608247},"selected":false,"dragging":false},{"width":115,"height":52,"id":"23","type":"selectorNode","position":{"x":-596.2998742236841,"y":295.90801447055185},"data":{"subType":null,"displayName":"Selector Node","displayDescription":"Selector nodes execute children in order until one of them returns Success or all children return Failure. This is like an OR operator.","label":"Floor Switches","prompt":"","code":""},"positionAbsolute":{"x":-596.2998742236841,"y":295.90801447055185},"selected":false,"dragging":false},{"width":147,"height":52,"id":"24","type":"actionNode","position":{"x":-791.1229464512604,"y":399.1400820544989},"data":{"subType":null,"displayName":"Action Node","displayDescription":"Action nodes represent complex actions (e.g., 'open the door').","label":"Stay on current switch","prompt":"If I am within 0.1 sq. meters of a floorswitch that is on, then return running","code":"protected override NodeStatus Execute(RG rgObject)\n{\n\tvar myPlayer = rgObject.GetMyPlayer();\n\tvar floorSwitch = rgObject.FindNearestEntity(\"FloorSwitch\", myPlayer.position, e => (bool)e.GetValueOrDefault(\"isOn\", false));\n\tif (RG.MathFunctions.DistanceSq(myPlayer.position, floorSwitch.position) <= 0.1)\n\t\treturn NodeStatus.Running;\n\telse\n\t\treturn NodeStatus.Failure;\n}"},"positionAbsolute":{"x":-791.1229464512604,"y":399.1400820544989},"selected":false,"dragging":false}],"edges":[{"animated":true,"id":"e1-2","source":"1","target":"2","deletable":false},{"animated":true,"id":"3","source":"2","target":"3"},{"animated":true,"id":"6","source":"2","target":"6"},{"animated":true,"id":"9","source":"7","target":"9"},{"animated":true,"id":"10","source":"7","target":"10","selected":false},{"animated":true,"id":"12","source":"6","target":"12"},{"animated":true,"id":"13","source":"12","target":"13","selected":false},{"animated":true,"id":"14","source":"12","target":"14"},{"animated":true,"id":"15","source":"6","target":"15"},{"animated":true,"id":"16","source":"15","target":"16"},{"animated":true,"id":"17","source":"15","target":"17"},{"animated":true,"id":"18","source":"2","target":"18","selected":false},{"animated":true,"id":"20","source":"2","target":"20"},{"animated":true,"source":"23","sourceHandle":null,"target":"24","targetHandle":null,"id":"reactflow__edge-23-24"},{"animated":true,"source":"23","sourceHandle":null,"target":"7","targetHandle":null,"id":"reactflow__edge-23-7"},{"animated":true,"source":"6","sourceHandle":null,"target":"23","targetHandle":null,"id":"reactflow__edge-6-23"}],"viewport":{"x":789.3726391118282,"y":-8.44489257287023,"zoom":0.9105697696460494}}