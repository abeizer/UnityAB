{"nodes":[{"width":98,"height":36,"id":"1","type":"rootNode","position":{"x":-91.70250000373933,"y":-4.298554687675306},"deletable":false,"data":{"nodeTypeName":"Root Node","nodeTypeDescription":"This is the Root Node, from which the rest of the graph is built.","label":"Root Node"},"positionAbsolute":{"x":-91.70250000373933,"y":-4.298554687675306},"selected":false,"dragging":false},{"width":167,"height":52,"id":"2","type":"sequenceNode","position":{"x":-128.95664063025845,"y":89.97003906209102},"deletable":false,"data":{"isConnectableTarget":false,"nodeTypeName":"Sequence Node","nodeTypeDescription":"This is the starting point for your bot's Behavior Tree logic.","label":"Top Level Sequence Node","prompt":"","code":""},"positionAbsolute":{"x":-128.95664063025845,"y":89.97003906209102},"selected":false,"dragging":false},{"width":94,"height":52,"id":"3","type":"actionNode","position":{"x":-458.00586174203636,"y":196.83148282135542},"data":{"subType":null,"displayName":"Action Node","displayDescription":"Action nodes represent complex actions (e.g., 'open the door').","label":"Set charType","prompt":"","code":"class LeafNode extends TreeNode {\n\t\n\tcharInfo = {\n\t\ttype: [\"Mage\", \"Rogue\", \"Tank\", \"Archer\"],\n\t\tabilities: [[0,1], [0,1,2], [0,1], [0,1,2]],\n\t\t// teamId\n\t\tabilityTargets: [[1,0], [1,1,-1], [1,-1], [1,1,1]]\n\t}\n\n\tpublic override async execute(rg): Promise<NodeStatus>{\t\t\n\t\t// The character type we request may not be the one we actually get\n\t\tconst characterType = rg.getBot().characterType;\n\t\tif (characterType) {\n\t\t\tconst newCharType = this.charInfo.type.indexOf(characterType);\n\t\t\tthis.setData(\"charType\", newCharType)\n\t\t\treturn NodeStatus.SUCCESS;\n  \t}\n\t\t\n\t\tconsole.error(\"Could not parse character type\");\n\t\treturn NodeStatus.FAILURE;\n\t}\n}"},"positionAbsolute":{"x":-458.00586174203636,"y":196.83148282135542},"selected":false,"dragging":false},{"width":118,"height":52,"id":"6","type":"selectorNode","position":{"x":-117.443155654495,"y":196.6334809544632},"data":{"subType":null,"displayName":"Selector Node","displayDescription":"Selector nodes execute children in order until one of them returns Success or all children return Failure. This is like an OR operator.","label":"Choose an action","prompt":"","code":""},"positionAbsolute":{"x":-117.443155654495,"y":196.6334809544632},"selected":false,"dragging":false},{"width":129,"height":52,"id":"7","type":"sequenceNode","position":{"x":-265.7845867669106,"y":307.7202147555416},"data":{"subType":null,"displayName":"Sequence Node","displayDescription":"Sequence nodes execute children in order until one child returns Failure or all children returns Success. This is like an AND operator.","label":"Floor switches","prompt":"","code":""},"positionAbsolute":{"x":-265.7845867669106,"y":307.7202147555416},"selected":false,"dragging":false},{"width":154,"height":52,"id":"9","type":"conditionNode","position":{"x":-476.28056439447016,"y":393.7988315429936},"data":{"subType":null,"displayName":"Condition Node","displayDescription":"Condition nodes represent simple checks (e.g., 'is the gripper open?')","label":"Is floor switch in range?","prompt":"","code":"class LeafNode extends TreeNode {\n\tpublic override async execute(rg): Promise<NodeStatus>{\t\t\n\t\t// if the bot is standing on a switch, then do nothing\n\t\tconst floorSwitch = await rg.findEntity(\"FloorSwitch\");\n\t\tif(floorSwitch) {\n\t\t\tthis.setData(\"floorSwitch\", floorSwitch);\n\t\t\treturn NodeStatus.SUCCESS;\n\t\t}\n\n\t\treturn NodeStatus.FAILURE;\n\t}\n}"},"positionAbsolute":{"x":-476.28056439447016,"y":393.7988315429936},"selected":false,"dragging":false},{"width":110,"height":52,"id":"10","type":"actionNode","position":{"x":-303.7166422111813,"y":395.0994139039507},"data":{"subType":null,"displayName":"Action Node","displayDescription":"Action nodes represent complex actions (e.g., 'open the door').","label":"Stand on switch","prompt":"","code":"class LeafNode extends TreeNode {\n\tpublic override async execute(rg): Promise<NodeStatus>{\t\t\n\t\tconst floorSwitch = this.getData<any>(\"floorSwitch\");\n\n\t\t// already standing on it\n\t\tif(floorSwitch && await rg.entityHasAttribute(floorSwitch, \"isOn\", true)) {\n\t\t\treturn NodeStatus.SUCCESS;\n\t\t}\n\n\t\t// otherwise go to it\n\t\tif(floorSwitch && rg.MathFunctions.distanceSq(rg.getBot().position, floorSwitch.position) < 50) {\n\t\t\trg.performAction(\"FollowObject\", {\n\t\t\t\ttargetId: floorSwitch.id,\n\t\t\t\trange: 0.1\n\t\t\t});\n\t\t\treturn NodeStatus.RUNNING;\n  \t}\n\n\t\treturn NodeStatus.FAILURE\n\t}\n}"},"positionAbsolute":{"x":-303.7166422111813,"y":395.0994139039507},"selected":true,"dragging":false},{"width":129,"height":52,"id":"12","type":"sequenceNode","position":{"x":-103.33044924312216,"y":308.7608392374527},"data":{"subType":null,"displayName":"Sequence Node","displayDescription":"Sequence nodes execute children in order until one child returns Failure or all children returns Success. This is like an AND operator.","label":"Support human","prompt":"","code":""},"positionAbsolute":{"x":-103.33044924312216,"y":308.7608392374527},"selected":false,"dragging":false},{"width":119,"height":52,"id":"13","type":"conditionNode","position":{"x":-150.6111145878715,"y":394.62261006852253},"data":{"subType":null,"displayName":"Condition Node","displayDescription":"Condition nodes represent simple checks (e.g., 'is the gripper open?')","label":"Is human nearby?","prompt":"","code":"class LeafNode extends TreeNode {\n\tpublic override async execute(rg): Promise<NodeStatus>{\t\t\n\t\tconst humanPlayer = await rg.findEntity(\"HumanPlayer\");\n\t\tif(humanPlayer) {\n\t\t\tthis.setData(\"humanPlayer\", humanPlayer);\n\t\t\treturn NodeStatus.SUCCESS;\n\t\t} \n\n\t\treturn NodeStatus.FAILURE;\n\t}\n}"},"positionAbsolute":{"x":-150.6111145878715,"y":394.62261006852253},"selected":false,"dragging":false},{"width":98,"height":52,"id":"14","type":"actionNode","position":{"x":-14.984888936516796,"y":392.88802883961205},"data":{"subType":null,"displayName":"Action Node","displayDescription":"Action nodes represent complex actions (e.g., 'open the door').","label":"Follow human","prompt":"","code":"class LeafNode extends TreeNode {\n\tpublic override async execute(rg): Promise<NodeStatus>{\t\t\n\t\tconst humanPlayer = this.getData<any>(\"humanPlayer\");\n\t\tconst distanceFrom = rg.MathFunctions.distanceSq(rg.getBot().position, humanPlayer.position);\n\t\tif(humanPlayer &&  distanceFrom > 50 ) {\n\t\t\trg.performAction(\"FollowObject\", {\n\t\t\t\ttargetId: humanPlayer.id,\n\t\t\t\trange: 10\n\t\t\t});\n\t\t\treturn NodeStatus.SUCCESS;\n\t\t}\n\n\t\treturn NodeStatus.FAILURE;\n\t}\n}"},"positionAbsolute":{"x":-14.984888936516796,"y":392.88802883961205},"selected":false,"dragging":false},{"width":129,"height":52,"id":"15","type":"sequenceNode","position":{"x":123.03240112969817,"y":306.1589673940871},"data":{"subType":null,"displayName":"Sequence Node","displayDescription":"Sequence nodes execute children in order until one child returns Failure or all children returns Success. This is like an AND operator.","label":"Attack enemy","prompt":"","code":""},"positionAbsolute":{"x":123.03240112969817,"y":306.1589673940871},"selected":false,"dragging":false},{"width":119,"height":52,"id":"16","type":"conditionNode","position":{"x":112.62491375623515,"y":389.53694874962133},"data":{"subType":null,"displayName":"Condition Node","displayDescription":"Condition nodes represent simple checks (e.g., 'is the gripper open?')","label":"Is enemy nearby?","prompt":"","code":"class LeafNode extends TreeNode {\n\tpublic override async execute(rg): Promise<NodeStatus>{\t\t\n\t\t// null entity because we want either Imp or Crystal, whichever is closer\n\t\tconst enemy = await rg.findNearestEntity(null, null, (entity) => { return entity.team == 1 && !entity.broken});\n\t\tif(enemy) {\n\t\t\tconsole.log(\"found enemy\");\n\t\t\tthis.setData(\"enemy\", enemy);\n\t\t\treturn NodeStatus.SUCCESS;\n\t\t}\n\n\t\treturn NodeStatus.FAILURE;\n\t}\n}"},"positionAbsolute":{"x":112.62491375623515,"y":389.53694874962133},"selected":false,"dragging":false},{"width":94,"height":52,"id":"17","type":"actionNode","position":{"x":247.05495899679892,"y":389.4188663817911},"data":{"subType":null,"displayName":"Action Node","displayDescription":"Action nodes represent complex actions (e.g., 'open the door').","label":"Attack","prompt":"","code":"class LeafNode extends TreeNode {\n\tpublic override async execute(rg): Promise<NodeStatus>{\t\t\n\t\t\n\t\tconst enemy = this.getData<any>(\"enemy\");\n\t\tif(enemy && (enemy.type == \"Crystal\" || enemy.health > 0)) {\n\t\t\tconsole.log(\"queuing attack enemy!!!!\")\n\t\t\trg.performAction(\"PerformSkill\", {\n\t\t\t\tskillId: 0,\n\t\t\t\ttargetId: enemy.id\n\t\t\t});\n\t\t\treturn NodeStatus.SUCCESS;\n  \t}\n\t\treturn NodeStatus.FAILURE;\n\t}\n}"},"positionAbsolute":{"x":247.05495899679892,"y":389.4188663817911},"selected":false,"dragging":false},{"width":113,"height":52,"id":"18","type":"conditionNode","position":{"x":-588.8171971261204,"y":196.7914315185122},"data":{"subType":null,"displayName":"Condition Node","displayDescription":"Condition nodes represent simple checks (e.g., 'is the gripper open?')","label":"Is in game?","prompt":"","code":"class LeafNode extends TreeNode {\n\tpublic override async execute(rg): Promise<NodeStatus>{\t\t\n\t\treturn rg.getState().sceneName == \"BossRoom\" ? NodeStatus.SUCCESS : NodeStatus.RUNNING;\n\t}\n}"},"positionAbsolute":{"x":-588.8171971261204,"y":196.7914315185122},"selected":false,"dragging":false},{"width":189,"height":52,"id":"19","type":"conditionNode","position":{"x":-338.0962466390681,"y":196.64875770044787},"data":{"subType":null,"displayName":"Condition Node","displayDescription":"Condition nodes represent simple checks (e.g., 'is the gripper open?')","label":"Not already performing action","prompt":"","code":"class LeafNode extends TreeNode {\n\tpublic override async execute(rg): Promise<NodeStatus>{\t\t\n\t\t// Start typing your code here\n\t\tconst bot = rg.getBot();\n\t\tif(bot.hasQueuedActions || bot.isMoving) {\n\t\t\treturn NodeStatus.RUNNING;\n\t\t}\n\t\treturn NodeStatus.SUCCESS;\n\t}\n}"},"positionAbsolute":{"x":-338.0962466390681,"y":196.64875770044787},"selected":false,"dragging":false}],"edges":[{"animated":true,"id":"e1-2","source":"1","target":"2","deletable":false},{"animated":true,"id":"3","source":"2","target":"3"},{"animated":true,"id":"6","source":"2","target":"6"},{"animated":true,"id":"7","source":"6","target":"7"},{"animated":true,"id":"9","source":"7","target":"9"},{"animated":true,"id":"10","source":"7","target":"10"},{"animated":true,"id":"12","source":"6","target":"12"},{"animated":true,"id":"13","source":"12","target":"13","selected":false},{"animated":true,"id":"14","source":"12","target":"14"},{"animated":true,"id":"15","source":"6","target":"15"},{"animated":true,"id":"16","source":"15","target":"16"},{"animated":true,"id":"17","source":"15","target":"17"},{"animated":true,"id":"18","source":"2","target":"18"},{"animated":true,"id":"19","source":"2","target":"19"}],"viewport":{"x":650.1358625277484,"y":-47.406654971944135,"zoom":1.1716659574474362}}